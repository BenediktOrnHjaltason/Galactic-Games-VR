using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class KeycardPuzzle_Model
{
    [RealtimeProperty(1, true, true)]
    int _insertedKeys;

    [RealtimeProperty(2, true, true)]
    bool _leftPortOccupied;

    [RealtimeProperty(3, true, true)]
    bool _rightPortOccupied;

    [RealtimeProperty(4, true, true)]
    bool _previousActionOpenedDoor;

}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class KeycardPuzzle_Model : RealtimeModel {
    public int insertedKeys {
        get {
            return _cache.LookForValueInCache(_insertedKeys, entry => entry.insertedKeysSet, entry => entry.insertedKeys);
        }
        set {
            if (this.insertedKeys == value) return;
            _cache.UpdateLocalCache(entry => { entry.insertedKeysSet = true; entry.insertedKeys = value; return entry; });
            InvalidateReliableLength();
            FireInsertedKeysDidChange(value);
        }
    }
    
    public bool leftPortOccupied {
        get {
            return _cache.LookForValueInCache(_leftPortOccupied, entry => entry.leftPortOccupiedSet, entry => entry.leftPortOccupied);
        }
        set {
            if (this.leftPortOccupied == value) return;
            _cache.UpdateLocalCache(entry => { entry.leftPortOccupiedSet = true; entry.leftPortOccupied = value; return entry; });
            InvalidateReliableLength();
            FireLeftPortOccupiedDidChange(value);
        }
    }
    
    public bool rightPortOccupied {
        get {
            return _cache.LookForValueInCache(_rightPortOccupied, entry => entry.rightPortOccupiedSet, entry => entry.rightPortOccupied);
        }
        set {
            if (this.rightPortOccupied == value) return;
            _cache.UpdateLocalCache(entry => { entry.rightPortOccupiedSet = true; entry.rightPortOccupied = value; return entry; });
            InvalidateReliableLength();
            FireRightPortOccupiedDidChange(value);
        }
    }
    
    public bool previousActionOpenedDoor {
        get {
            return _cache.LookForValueInCache(_previousActionOpenedDoor, entry => entry.previousActionOpenedDoorSet, entry => entry.previousActionOpenedDoor);
        }
        set {
            if (this.previousActionOpenedDoor == value) return;
            _cache.UpdateLocalCache(entry => { entry.previousActionOpenedDoorSet = true; entry.previousActionOpenedDoor = value; return entry; });
            InvalidateReliableLength();
            FirePreviousActionOpenedDoorDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(KeycardPuzzle_Model model, T value);
    public event PropertyChangedHandler<int> insertedKeysDidChange;
    public event PropertyChangedHandler<bool> leftPortOccupiedDidChange;
    public event PropertyChangedHandler<bool> rightPortOccupiedDidChange;
    public event PropertyChangedHandler<bool> previousActionOpenedDoorDidChange;
    
    private struct LocalCacheEntry {
        public bool insertedKeysSet;
        public int insertedKeys;
        public bool leftPortOccupiedSet;
        public bool leftPortOccupied;
        public bool rightPortOccupiedSet;
        public bool rightPortOccupied;
        public bool previousActionOpenedDoorSet;
        public bool previousActionOpenedDoor;
    }
    
    private LocalChangeCache<LocalCacheEntry> _cache = new LocalChangeCache<LocalCacheEntry>();
    
    public enum PropertyID : uint {
        InsertedKeys = 1,
        LeftPortOccupied = 2,
        RightPortOccupied = 3,
        PreviousActionOpenedDoor = 4,
    }
    
    public KeycardPuzzle_Model() : this(null) {
    }
    
    public KeycardPuzzle_Model(RealtimeModel parent) : base(null, parent) {
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        UnsubscribeClearCacheCallback();
    }
    
    private void FireInsertedKeysDidChange(int value) {
        try {
            insertedKeysDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireLeftPortOccupiedDidChange(bool value) {
        try {
            leftPortOccupiedDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireRightPortOccupiedDidChange(bool value) {
        try {
            rightPortOccupiedDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FirePreviousActionOpenedDoorDidChange(bool value) {
        try {
            previousActionOpenedDoorDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        int length = 0;
        if (context.fullModel) {
            FlattenCache();
            length += WriteStream.WriteVarint32Length((uint)PropertyID.InsertedKeys, (uint)_insertedKeys);
            length += WriteStream.WriteVarint32Length((uint)PropertyID.LeftPortOccupied, _leftPortOccupied ? 1u : 0u);
            length += WriteStream.WriteVarint32Length((uint)PropertyID.RightPortOccupied, _rightPortOccupied ? 1u : 0u);
            length += WriteStream.WriteVarint32Length((uint)PropertyID.PreviousActionOpenedDoor, _previousActionOpenedDoor ? 1u : 0u);
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.insertedKeysSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.InsertedKeys, (uint)entry.insertedKeys);
            }
            if (entry.leftPortOccupiedSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.LeftPortOccupied, entry.leftPortOccupied ? 1u : 0u);
            }
            if (entry.rightPortOccupiedSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.RightPortOccupied, entry.rightPortOccupied ? 1u : 0u);
            }
            if (entry.previousActionOpenedDoorSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.PreviousActionOpenedDoor, entry.previousActionOpenedDoor ? 1u : 0u);
            }
        }
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var didWriteProperties = false;
        
        if (context.fullModel) {
            stream.WriteVarint32((uint)PropertyID.InsertedKeys, (uint)_insertedKeys);
            stream.WriteVarint32((uint)PropertyID.LeftPortOccupied, _leftPortOccupied ? 1u : 0u);
            stream.WriteVarint32((uint)PropertyID.RightPortOccupied, _rightPortOccupied ? 1u : 0u);
            stream.WriteVarint32((uint)PropertyID.PreviousActionOpenedDoor, _previousActionOpenedDoor ? 1u : 0u);
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.insertedKeysSet || entry.leftPortOccupiedSet || entry.rightPortOccupiedSet || entry.previousActionOpenedDoorSet) {
                _cache.PushLocalCacheToInflight(context.updateID);
                ClearCacheOnStreamCallback(context);
            }
            if (entry.insertedKeysSet) {
                stream.WriteVarint32((uint)PropertyID.InsertedKeys, (uint)entry.insertedKeys);
                didWriteProperties = true;
            }
            if (entry.leftPortOccupiedSet) {
                stream.WriteVarint32((uint)PropertyID.LeftPortOccupied, entry.leftPortOccupied ? 1u : 0u);
                didWriteProperties = true;
            }
            if (entry.rightPortOccupiedSet) {
                stream.WriteVarint32((uint)PropertyID.RightPortOccupied, entry.rightPortOccupied ? 1u : 0u);
                didWriteProperties = true;
            }
            if (entry.previousActionOpenedDoorSet) {
                stream.WriteVarint32((uint)PropertyID.PreviousActionOpenedDoor, entry.previousActionOpenedDoor ? 1u : 0u);
                didWriteProperties = true;
            }
            
            if (didWriteProperties) InvalidateReliableLength();
        }
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.InsertedKeys: {
                    int previousValue = _insertedKeys;
                    _insertedKeys = (int)stream.ReadVarint32();
                    bool insertedKeysExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.insertedKeysSet);
                    if (!insertedKeysExistsInChangeCache && _insertedKeys != previousValue) {
                        FireInsertedKeysDidChange(_insertedKeys);
                    }
                    break;
                }
                case (uint)PropertyID.LeftPortOccupied: {
                    bool previousValue = _leftPortOccupied;
                    _leftPortOccupied = (stream.ReadVarint32() != 0);
                    bool leftPortOccupiedExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.leftPortOccupiedSet);
                    if (!leftPortOccupiedExistsInChangeCache && _leftPortOccupied != previousValue) {
                        FireLeftPortOccupiedDidChange(_leftPortOccupied);
                    }
                    break;
                }
                case (uint)PropertyID.RightPortOccupied: {
                    bool previousValue = _rightPortOccupied;
                    _rightPortOccupied = (stream.ReadVarint32() != 0);
                    bool rightPortOccupiedExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.rightPortOccupiedSet);
                    if (!rightPortOccupiedExistsInChangeCache && _rightPortOccupied != previousValue) {
                        FireRightPortOccupiedDidChange(_rightPortOccupied);
                    }
                    break;
                }
                case (uint)PropertyID.PreviousActionOpenedDoor: {
                    bool previousValue = _previousActionOpenedDoor;
                    _previousActionOpenedDoor = (stream.ReadVarint32() != 0);
                    bool previousActionOpenedDoorExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.previousActionOpenedDoorSet);
                    if (!previousActionOpenedDoorExistsInChangeCache && _previousActionOpenedDoor != previousValue) {
                        FirePreviousActionOpenedDoorDidChange(_previousActionOpenedDoor);
                    }
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
        }
    }
    
    #region Cache Operations
    
    private StreamEventDispatcher _streamEventDispatcher;
    
    private void FlattenCache() {
        _insertedKeys = insertedKeys;
        _leftPortOccupied = leftPortOccupied;
        _rightPortOccupied = rightPortOccupied;
        _previousActionOpenedDoor = previousActionOpenedDoor;
        _cache.Clear();
    }
    
    private void ClearCache(uint updateID) {
        _cache.RemoveUpdateFromInflight(updateID);
    }
    
    private void ClearCacheOnStreamCallback(StreamContext context) {
        if (_streamEventDispatcher != context.dispatcher) {
            UnsubscribeClearCacheCallback(); // unsub from previous dispatcher
        }
        _streamEventDispatcher = context.dispatcher;
        _streamEventDispatcher.AddStreamCallback(context.updateID, ClearCache);
    }
    
    private void UnsubscribeClearCacheCallback() {
        if (_streamEventDispatcher != null) {
            _streamEventDispatcher.RemoveStreamCallback(ClearCache);
            _streamEventDispatcher = null;
        }
    }
    
    #endregion
}
/* ----- End Normal Autogenerated Code ----- */
