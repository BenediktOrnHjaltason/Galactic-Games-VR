using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

public enum EScreenState
{
    OPEN,
    CLOSED
}

public enum ESlidesOperationPhase
{
    RETRACTING,
    EXPANDING
}



[RealtimeModel]
public partial class InteractiveScreenSync_Model
{
    [RealtimeProperty(1, true, true)]
    bool _executingAnything = false;

    [RealtimeProperty(2, true, true)]
    bool _executingMinMax = false;

    [RealtimeProperty(3, true, true)]
    bool _executingSlideChange = false;

    [RealtimeProperty(4, true, true)]
    int _activeSlideIndex = 0;

    [RealtimeProperty(5, true, true)]
    int _previousSlideIndex = 0;

    [RealtimeProperty(6, true, true)]
    bool _slideChanged = false;

    [RealtimeProperty(7, true, true)]
    EScreenState _openOrClosed;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class InteractiveScreenSync_Model : RealtimeModel {
    public bool executingAnything {
        get {
            return _cache.LookForValueInCache(_executingAnything, entry => entry.executingAnythingSet, entry => entry.executingAnything);
        }
        set {
            if (this.executingAnything == value) return;
            _cache.UpdateLocalCache(entry => { entry.executingAnythingSet = true; entry.executingAnything = value; return entry; });
            InvalidateReliableLength();
            FireExecutingAnythingDidChange(value);
        }
    }
    
    public bool executingMinMax {
        get {
            return _cache.LookForValueInCache(_executingMinMax, entry => entry.executingMinMaxSet, entry => entry.executingMinMax);
        }
        set {
            if (this.executingMinMax == value) return;
            _cache.UpdateLocalCache(entry => { entry.executingMinMaxSet = true; entry.executingMinMax = value; return entry; });
            InvalidateReliableLength();
            FireExecutingMinMaxDidChange(value);
        }
    }
    
    public bool executingSlideChange {
        get {
            return _cache.LookForValueInCache(_executingSlideChange, entry => entry.executingSlideChangeSet, entry => entry.executingSlideChange);
        }
        set {
            if (this.executingSlideChange == value) return;
            _cache.UpdateLocalCache(entry => { entry.executingSlideChangeSet = true; entry.executingSlideChange = value; return entry; });
            InvalidateReliableLength();
            FireExecutingSlideChangeDidChange(value);
        }
    }
    
    public int activeSlideIndex {
        get {
            return _cache.LookForValueInCache(_activeSlideIndex, entry => entry.activeSlideIndexSet, entry => entry.activeSlideIndex);
        }
        set {
            if (this.activeSlideIndex == value) return;
            _cache.UpdateLocalCache(entry => { entry.activeSlideIndexSet = true; entry.activeSlideIndex = value; return entry; });
            InvalidateReliableLength();
            FireActiveSlideIndexDidChange(value);
        }
    }
    
    public int previousSlideIndex {
        get {
            return _cache.LookForValueInCache(_previousSlideIndex, entry => entry.previousSlideIndexSet, entry => entry.previousSlideIndex);
        }
        set {
            if (this.previousSlideIndex == value) return;
            _cache.UpdateLocalCache(entry => { entry.previousSlideIndexSet = true; entry.previousSlideIndex = value; return entry; });
            InvalidateReliableLength();
            FirePreviousSlideIndexDidChange(value);
        }
    }
    
    public bool slideChanged {
        get {
            return _cache.LookForValueInCache(_slideChanged, entry => entry.slideChangedSet, entry => entry.slideChanged);
        }
        set {
            if (this.slideChanged == value) return;
            _cache.UpdateLocalCache(entry => { entry.slideChangedSet = true; entry.slideChanged = value; return entry; });
            InvalidateReliableLength();
            FireSlideChangedDidChange(value);
        }
    }
    
    public EScreenState openOrClosed {
        get {
            return _cache.LookForValueInCache(_openOrClosed, entry => entry.openOrClosedSet, entry => entry.openOrClosed);
        }
        set {
            if (this.openOrClosed == value) return;
            _cache.UpdateLocalCache(entry => { entry.openOrClosedSet = true; entry.openOrClosed = value; return entry; });
            InvalidateReliableLength();
            FireOpenOrClosedDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(InteractiveScreenSync_Model model, T value);
    public event PropertyChangedHandler<bool> executingAnythingDidChange;
    public event PropertyChangedHandler<bool> executingMinMaxDidChange;
    public event PropertyChangedHandler<bool> executingSlideChangeDidChange;
    public event PropertyChangedHandler<int> activeSlideIndexDidChange;
    public event PropertyChangedHandler<int> previousSlideIndexDidChange;
    public event PropertyChangedHandler<bool> slideChangedDidChange;
    public event PropertyChangedHandler<EScreenState> openOrClosedDidChange;
    
    private struct LocalCacheEntry {
        public bool executingAnythingSet;
        public bool executingAnything;
        public bool executingMinMaxSet;
        public bool executingMinMax;
        public bool executingSlideChangeSet;
        public bool executingSlideChange;
        public bool activeSlideIndexSet;
        public int activeSlideIndex;
        public bool previousSlideIndexSet;
        public int previousSlideIndex;
        public bool slideChangedSet;
        public bool slideChanged;
        public bool openOrClosedSet;
        public EScreenState openOrClosed;
    }
    
    private LocalChangeCache<LocalCacheEntry> _cache = new LocalChangeCache<LocalCacheEntry>();
    
    public enum PropertyID : uint {
        ExecutingAnything = 1,
        ExecutingMinMax = 2,
        ExecutingSlideChange = 3,
        ActiveSlideIndex = 4,
        PreviousSlideIndex = 5,
        SlideChanged = 6,
        OpenOrClosed = 7,
    }
    
    public InteractiveScreenSync_Model() : this(null) {
    }
    
    public InteractiveScreenSync_Model(RealtimeModel parent) : base(null, parent) {
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        UnsubscribeClearCacheCallback();
    }
    
    private void FireExecutingAnythingDidChange(bool value) {
        try {
            executingAnythingDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireExecutingMinMaxDidChange(bool value) {
        try {
            executingMinMaxDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireExecutingSlideChangeDidChange(bool value) {
        try {
            executingSlideChangeDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireActiveSlideIndexDidChange(int value) {
        try {
            activeSlideIndexDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FirePreviousSlideIndexDidChange(int value) {
        try {
            previousSlideIndexDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireSlideChangedDidChange(bool value) {
        try {
            slideChangedDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireOpenOrClosedDidChange(EScreenState value) {
        try {
            openOrClosedDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        int length = 0;
        if (context.fullModel) {
            FlattenCache();
            length += WriteStream.WriteVarint32Length((uint)PropertyID.ExecutingAnything, _executingAnything ? 1u : 0u);
            length += WriteStream.WriteVarint32Length((uint)PropertyID.ExecutingMinMax, _executingMinMax ? 1u : 0u);
            length += WriteStream.WriteVarint32Length((uint)PropertyID.ExecutingSlideChange, _executingSlideChange ? 1u : 0u);
            length += WriteStream.WriteVarint32Length((uint)PropertyID.ActiveSlideIndex, (uint)_activeSlideIndex);
            length += WriteStream.WriteVarint32Length((uint)PropertyID.PreviousSlideIndex, (uint)_previousSlideIndex);
            length += WriteStream.WriteVarint32Length((uint)PropertyID.SlideChanged, _slideChanged ? 1u : 0u);
            length += WriteStream.WriteVarint32Length((uint)PropertyID.OpenOrClosed, (uint) _openOrClosed);
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.executingAnythingSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.ExecutingAnything, entry.executingAnything ? 1u : 0u);
            }
            if (entry.executingMinMaxSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.ExecutingMinMax, entry.executingMinMax ? 1u : 0u);
            }
            if (entry.executingSlideChangeSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.ExecutingSlideChange, entry.executingSlideChange ? 1u : 0u);
            }
            if (entry.activeSlideIndexSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.ActiveSlideIndex, (uint)entry.activeSlideIndex);
            }
            if (entry.previousSlideIndexSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.PreviousSlideIndex, (uint)entry.previousSlideIndex);
            }
            if (entry.slideChangedSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.SlideChanged, entry.slideChanged ? 1u : 0u);
            }
            if (entry.openOrClosedSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.OpenOrClosed, (uint) entry.openOrClosed);
            }
        }
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var didWriteProperties = false;
        
        if (context.fullModel) {
            stream.WriteVarint32((uint)PropertyID.ExecutingAnything, _executingAnything ? 1u : 0u);
            stream.WriteVarint32((uint)PropertyID.ExecutingMinMax, _executingMinMax ? 1u : 0u);
            stream.WriteVarint32((uint)PropertyID.ExecutingSlideChange, _executingSlideChange ? 1u : 0u);
            stream.WriteVarint32((uint)PropertyID.ActiveSlideIndex, (uint)_activeSlideIndex);
            stream.WriteVarint32((uint)PropertyID.PreviousSlideIndex, (uint)_previousSlideIndex);
            stream.WriteVarint32((uint)PropertyID.SlideChanged, _slideChanged ? 1u : 0u);
            stream.WriteVarint32((uint)PropertyID.OpenOrClosed, (uint) _openOrClosed);
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.executingAnythingSet || entry.executingMinMaxSet || entry.executingSlideChangeSet || entry.activeSlideIndexSet || entry.previousSlideIndexSet || entry.slideChangedSet || entry.openOrClosedSet) {
                _cache.PushLocalCacheToInflight(context.updateID);
                ClearCacheOnStreamCallback(context);
            }
            if (entry.executingAnythingSet) {
                stream.WriteVarint32((uint)PropertyID.ExecutingAnything, entry.executingAnything ? 1u : 0u);
                didWriteProperties = true;
            }
            if (entry.executingMinMaxSet) {
                stream.WriteVarint32((uint)PropertyID.ExecutingMinMax, entry.executingMinMax ? 1u : 0u);
                didWriteProperties = true;
            }
            if (entry.executingSlideChangeSet) {
                stream.WriteVarint32((uint)PropertyID.ExecutingSlideChange, entry.executingSlideChange ? 1u : 0u);
                didWriteProperties = true;
            }
            if (entry.activeSlideIndexSet) {
                stream.WriteVarint32((uint)PropertyID.ActiveSlideIndex, (uint)entry.activeSlideIndex);
                didWriteProperties = true;
            }
            if (entry.previousSlideIndexSet) {
                stream.WriteVarint32((uint)PropertyID.PreviousSlideIndex, (uint)entry.previousSlideIndex);
                didWriteProperties = true;
            }
            if (entry.slideChangedSet) {
                stream.WriteVarint32((uint)PropertyID.SlideChanged, entry.slideChanged ? 1u : 0u);
                didWriteProperties = true;
            }
            if (entry.openOrClosedSet) {
                stream.WriteVarint32((uint)PropertyID.OpenOrClosed, (uint) entry.openOrClosed);
                didWriteProperties = true;
            }
            
            if (didWriteProperties) InvalidateReliableLength();
        }
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.ExecutingAnything: {
                    bool previousValue = _executingAnything;
                    _executingAnything = (stream.ReadVarint32() != 0);
                    bool executingAnythingExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.executingAnythingSet);
                    if (!executingAnythingExistsInChangeCache && _executingAnything != previousValue) {
                        FireExecutingAnythingDidChange(_executingAnything);
                    }
                    break;
                }
                case (uint)PropertyID.ExecutingMinMax: {
                    bool previousValue = _executingMinMax;
                    _executingMinMax = (stream.ReadVarint32() != 0);
                    bool executingMinMaxExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.executingMinMaxSet);
                    if (!executingMinMaxExistsInChangeCache && _executingMinMax != previousValue) {
                        FireExecutingMinMaxDidChange(_executingMinMax);
                    }
                    break;
                }
                case (uint)PropertyID.ExecutingSlideChange: {
                    bool previousValue = _executingSlideChange;
                    _executingSlideChange = (stream.ReadVarint32() != 0);
                    bool executingSlideChangeExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.executingSlideChangeSet);
                    if (!executingSlideChangeExistsInChangeCache && _executingSlideChange != previousValue) {
                        FireExecutingSlideChangeDidChange(_executingSlideChange);
                    }
                    break;
                }
                case (uint)PropertyID.ActiveSlideIndex: {
                    int previousValue = _activeSlideIndex;
                    _activeSlideIndex = (int)stream.ReadVarint32();
                    bool activeSlideIndexExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.activeSlideIndexSet);
                    if (!activeSlideIndexExistsInChangeCache && _activeSlideIndex != previousValue) {
                        FireActiveSlideIndexDidChange(_activeSlideIndex);
                    }
                    break;
                }
                case (uint)PropertyID.PreviousSlideIndex: {
                    int previousValue = _previousSlideIndex;
                    _previousSlideIndex = (int)stream.ReadVarint32();
                    bool previousSlideIndexExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.previousSlideIndexSet);
                    if (!previousSlideIndexExistsInChangeCache && _previousSlideIndex != previousValue) {
                        FirePreviousSlideIndexDidChange(_previousSlideIndex);
                    }
                    break;
                }
                case (uint)PropertyID.SlideChanged: {
                    bool previousValue = _slideChanged;
                    _slideChanged = (stream.ReadVarint32() != 0);
                    bool slideChangedExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.slideChangedSet);
                    if (!slideChangedExistsInChangeCache && _slideChanged != previousValue) {
                        FireSlideChangedDidChange(_slideChanged);
                    }
                    break;
                }
                case (uint)PropertyID.OpenOrClosed: {
                    EScreenState previousValue = _openOrClosed;
                    _openOrClosed = (EScreenState) stream.ReadVarint32();
                    bool openOrClosedExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.openOrClosedSet);
                    if (!openOrClosedExistsInChangeCache && _openOrClosed != previousValue) {
                        FireOpenOrClosedDidChange(_openOrClosed);
                    }
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
        }
    }
    
    #region Cache Operations
    
    private StreamEventDispatcher _streamEventDispatcher;
    
    private void FlattenCache() {
        _executingAnything = executingAnything;
        _executingMinMax = executingMinMax;
        _executingSlideChange = executingSlideChange;
        _activeSlideIndex = activeSlideIndex;
        _previousSlideIndex = previousSlideIndex;
        _slideChanged = slideChanged;
        _openOrClosed = openOrClosed;
        _cache.Clear();
    }
    
    private void ClearCache(uint updateID) {
        _cache.RemoveUpdateFromInflight(updateID);
    }
    
    private void ClearCacheOnStreamCallback(StreamContext context) {
        if (_streamEventDispatcher != context.dispatcher) {
            UnsubscribeClearCacheCallback(); // unsub from previous dispatcher
        }
        _streamEventDispatcher = context.dispatcher;
        _streamEventDispatcher.AddStreamCallback(context.updateID, ClearCache);
    }
    
    private void UnsubscribeClearCacheCallback() {
        if (_streamEventDispatcher != null) {
            _streamEventDispatcher.RemoveStreamCallback(ClearCache);
            _streamEventDispatcher = null;
        }
    }
    
    #endregion
}
/* ----- End Normal Autogenerated Code ----- */
