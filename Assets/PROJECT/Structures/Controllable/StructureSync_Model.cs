using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class StructureSync_Model
{

    [RealtimeProperty(1, true, true)]
    int _playersOccupying = 0;

    [RealtimeProperty(2, true, true)]
    bool _availableToManipulate = true;

    [RealtimeProperty(3, true, true)]
    bool _collisionEnabled = true;

}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class StructureSync_Model : RealtimeModel {
    public int playersOccupying {
        get {
            return _cache.LookForValueInCache(_playersOccupying, entry => entry.playersOccupyingSet, entry => entry.playersOccupying);
        }
        set {
            if (this.playersOccupying == value) return;
            _cache.UpdateLocalCache(entry => { entry.playersOccupyingSet = true; entry.playersOccupying = value; return entry; });
            InvalidateReliableLength();
            FirePlayersOccupyingDidChange(value);
        }
    }
    
    public bool availableToManipulate {
        get {
            return _cache.LookForValueInCache(_availableToManipulate, entry => entry.availableToManipulateSet, entry => entry.availableToManipulate);
        }
        set {
            if (this.availableToManipulate == value) return;
            _cache.UpdateLocalCache(entry => { entry.availableToManipulateSet = true; entry.availableToManipulate = value; return entry; });
            InvalidateReliableLength();
            FireAvailableToManipulateDidChange(value);
        }
    }
    
    public bool collisionEnabled {
        get {
            return _cache.LookForValueInCache(_collisionEnabled, entry => entry.collisionEnabledSet, entry => entry.collisionEnabled);
        }
        set {
            if (this.collisionEnabled == value) return;
            _cache.UpdateLocalCache(entry => { entry.collisionEnabledSet = true; entry.collisionEnabled = value; return entry; });
            InvalidateReliableLength();
            FireCollisionEnabledDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(StructureSync_Model model, T value);
    public event PropertyChangedHandler<int> playersOccupyingDidChange;
    public event PropertyChangedHandler<bool> availableToManipulateDidChange;
    public event PropertyChangedHandler<bool> collisionEnabledDidChange;
    
    private struct LocalCacheEntry {
        public bool playersOccupyingSet;
        public int playersOccupying;
        public bool availableToManipulateSet;
        public bool availableToManipulate;
        public bool collisionEnabledSet;
        public bool collisionEnabled;
    }
    
    private LocalChangeCache<LocalCacheEntry> _cache = new LocalChangeCache<LocalCacheEntry>();
    
    public enum PropertyID : uint {
        PlayersOccupying = 1,
        AvailableToManipulate = 2,
        CollisionEnabled = 3,
    }
    
    public StructureSync_Model() : this(null) {
    }
    
    public StructureSync_Model(RealtimeModel parent) : base(null, parent) {
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        UnsubscribeClearCacheCallback();
    }
    
    private void FirePlayersOccupyingDidChange(int value) {
        try {
            playersOccupyingDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireAvailableToManipulateDidChange(bool value) {
        try {
            availableToManipulateDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireCollisionEnabledDidChange(bool value) {
        try {
            collisionEnabledDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        int length = 0;
        if (context.fullModel) {
            FlattenCache();
            length += WriteStream.WriteVarint32Length((uint)PropertyID.PlayersOccupying, (uint)_playersOccupying);
            length += WriteStream.WriteVarint32Length((uint)PropertyID.AvailableToManipulate, _availableToManipulate ? 1u : 0u);
            length += WriteStream.WriteVarint32Length((uint)PropertyID.CollisionEnabled, _collisionEnabled ? 1u : 0u);
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.playersOccupyingSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.PlayersOccupying, (uint)entry.playersOccupying);
            }
            if (entry.availableToManipulateSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.AvailableToManipulate, entry.availableToManipulate ? 1u : 0u);
            }
            if (entry.collisionEnabledSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.CollisionEnabled, entry.collisionEnabled ? 1u : 0u);
            }
        }
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var didWriteProperties = false;
        
        if (context.fullModel) {
            stream.WriteVarint32((uint)PropertyID.PlayersOccupying, (uint)_playersOccupying);
            stream.WriteVarint32((uint)PropertyID.AvailableToManipulate, _availableToManipulate ? 1u : 0u);
            stream.WriteVarint32((uint)PropertyID.CollisionEnabled, _collisionEnabled ? 1u : 0u);
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.playersOccupyingSet || entry.availableToManipulateSet || entry.collisionEnabledSet) {
                _cache.PushLocalCacheToInflight(context.updateID);
                ClearCacheOnStreamCallback(context);
            }
            if (entry.playersOccupyingSet) {
                stream.WriteVarint32((uint)PropertyID.PlayersOccupying, (uint)entry.playersOccupying);
                didWriteProperties = true;
            }
            if (entry.availableToManipulateSet) {
                stream.WriteVarint32((uint)PropertyID.AvailableToManipulate, entry.availableToManipulate ? 1u : 0u);
                didWriteProperties = true;
            }
            if (entry.collisionEnabledSet) {
                stream.WriteVarint32((uint)PropertyID.CollisionEnabled, entry.collisionEnabled ? 1u : 0u);
                didWriteProperties = true;
            }
            
            if (didWriteProperties) InvalidateReliableLength();
        }
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.PlayersOccupying: {
                    int previousValue = _playersOccupying;
                    _playersOccupying = (int)stream.ReadVarint32();
                    bool playersOccupyingExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.playersOccupyingSet);
                    if (!playersOccupyingExistsInChangeCache && _playersOccupying != previousValue) {
                        FirePlayersOccupyingDidChange(_playersOccupying);
                    }
                    break;
                }
                case (uint)PropertyID.AvailableToManipulate: {
                    bool previousValue = _availableToManipulate;
                    _availableToManipulate = (stream.ReadVarint32() != 0);
                    bool availableToManipulateExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.availableToManipulateSet);
                    if (!availableToManipulateExistsInChangeCache && _availableToManipulate != previousValue) {
                        FireAvailableToManipulateDidChange(_availableToManipulate);
                    }
                    break;
                }
                case (uint)PropertyID.CollisionEnabled: {
                    bool previousValue = _collisionEnabled;
                    _collisionEnabled = (stream.ReadVarint32() != 0);
                    bool collisionEnabledExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.collisionEnabledSet);
                    if (!collisionEnabledExistsInChangeCache && _collisionEnabled != previousValue) {
                        FireCollisionEnabledDidChange(_collisionEnabled);
                    }
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
        }
    }
    
    #region Cache Operations
    
    private StreamEventDispatcher _streamEventDispatcher;
    
    private void FlattenCache() {
        _playersOccupying = playersOccupying;
        _availableToManipulate = availableToManipulate;
        _collisionEnabled = collisionEnabled;
        _cache.Clear();
    }
    
    private void ClearCache(uint updateID) {
        _cache.RemoveUpdateFromInflight(updateID);
    }
    
    private void ClearCacheOnStreamCallback(StreamContext context) {
        if (_streamEventDispatcher != context.dispatcher) {
            UnsubscribeClearCacheCallback(); // unsub from previous dispatcher
        }
        _streamEventDispatcher = context.dispatcher;
        _streamEventDispatcher.AddStreamCallback(context.updateID, ClearCache);
    }
    
    private void UnsubscribeClearCacheCallback() {
        if (_streamEventDispatcher != null) {
            _streamEventDispatcher.RemoveStreamCallback(ClearCache);
            _streamEventDispatcher = null;
        }
    }
    
    #endregion
}
/* ----- End Normal Autogenerated Code ----- */
