using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Types;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class OmniDeviceSync_Model
{
    [RealtimeProperty(1, true, true)]
    EOmniDeviceMode _deviceMode;

    [RealtimeProperty(2, true, true)]
    EHandDeviceState _operationState;

    [RealtimeProperty(3, false, true)]
    Vector3 _controlledStructurePosition;

    [RealtimeProperty(4, false, true)]
    Vector3 _controlForce;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class OmniDeviceSync_Model : RealtimeModel {
    public UnityEngine.Vector3 controlledStructurePosition {
        get {
            return _controlledStructurePosition;
        }
        set {
            if (_controlledStructurePosition == value) return;
            _controlledStructurePositionShouldWrite = true;
            _controlledStructurePosition = value;
            InvalidateUnreliableLength();
            FireControlledStructurePositionDidChange(value);
        }
    }
    
    public UnityEngine.Vector3 controlForce {
        get {
            return _controlForce;
        }
        set {
            if (_controlForce == value) return;
            _controlForceShouldWrite = true;
            _controlForce = value;
            InvalidateUnreliableLength();
            FireControlForceDidChange(value);
        }
    }
    
    public Types.EOmniDeviceMode deviceMode {
        get {
            return _cache.LookForValueInCache(_deviceMode, entry => entry.deviceModeSet, entry => entry.deviceMode);
        }
        set {
            if (this.deviceMode == value) return;
            _cache.UpdateLocalCache(entry => { entry.deviceModeSet = true; entry.deviceMode = value; return entry; });
            InvalidateReliableLength();
            FireDeviceModeDidChange(value);
        }
    }
    
    public Types.EHandDeviceState operationState {
        get {
            return _cache.LookForValueInCache(_operationState, entry => entry.operationStateSet, entry => entry.operationState);
        }
        set {
            if (this.operationState == value) return;
            _cache.UpdateLocalCache(entry => { entry.operationStateSet = true; entry.operationState = value; return entry; });
            InvalidateReliableLength();
            FireOperationStateDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(OmniDeviceSync_Model model, T value);
    public event PropertyChangedHandler<Types.EOmniDeviceMode> deviceModeDidChange;
    public event PropertyChangedHandler<Types.EHandDeviceState> operationStateDidChange;
    public event PropertyChangedHandler<UnityEngine.Vector3> controlledStructurePositionDidChange;
    public event PropertyChangedHandler<UnityEngine.Vector3> controlForceDidChange;
    
    private struct LocalCacheEntry {
        public bool deviceModeSet;
        public Types.EOmniDeviceMode deviceMode;
        public bool operationStateSet;
        public Types.EHandDeviceState operationState;
    }
    
    private LocalChangeCache<LocalCacheEntry> _cache = new LocalChangeCache<LocalCacheEntry>();
    
    private bool _controlledStructurePositionShouldWrite;
    private bool _controlForceShouldWrite;
    
    public enum PropertyID : uint {
        DeviceMode = 1,
        OperationState = 2,
        ControlledStructurePosition = 3,
        ControlForce = 4,
    }
    
    public OmniDeviceSync_Model() : this(null) {
    }
    
    public OmniDeviceSync_Model(RealtimeModel parent) : base(null, parent) {
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        UnsubscribeClearCacheCallback();
    }
    
    private void FireDeviceModeDidChange(Types.EOmniDeviceMode value) {
        try {
            deviceModeDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireOperationStateDidChange(Types.EHandDeviceState value) {
        try {
            operationStateDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireControlledStructurePositionDidChange(UnityEngine.Vector3 value) {
        try {
            controlledStructurePositionDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireControlForceDidChange(UnityEngine.Vector3 value) {
        try {
            controlForceDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        int length = 0;
        if (context.fullModel) {
            FlattenCache();
            length += WriteStream.WriteBytesLength((uint)PropertyID.ControlledStructurePosition, WriteStream.Vector3ToBytesLength());
            length += WriteStream.WriteBytesLength((uint)PropertyID.ControlForce, WriteStream.Vector3ToBytesLength());
            length += WriteStream.WriteVarint32Length((uint)PropertyID.DeviceMode, (uint) _deviceMode);
            length += WriteStream.WriteVarint32Length((uint)PropertyID.OperationState, (uint) _operationState);
        } else if (context.unreliableChannel) {
            if (_controlledStructurePositionShouldWrite) {
                length += WriteStream.WriteBytesLength((uint)PropertyID.ControlledStructurePosition, WriteStream.Vector3ToBytesLength());
            }
            if (_controlForceShouldWrite) {
                length += WriteStream.WriteBytesLength((uint)PropertyID.ControlForce, WriteStream.Vector3ToBytesLength());
            }
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.deviceModeSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.DeviceMode, (uint) entry.deviceMode);
            }
            if (entry.operationStateSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.OperationState, (uint) entry.operationState);
            }
        }
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var didWriteProperties = false;
        
        if (context.fullModel) {
            stream.WriteBytes((uint)PropertyID.ControlledStructurePosition, WriteStream.Vector3ToBytes(_controlledStructurePosition));
            _controlledStructurePositionShouldWrite = false;
            stream.WriteBytes((uint)PropertyID.ControlForce, WriteStream.Vector3ToBytes(_controlForce));
            _controlForceShouldWrite = false;
            stream.WriteVarint32((uint)PropertyID.DeviceMode, (uint) _deviceMode);
            stream.WriteVarint32((uint)PropertyID.OperationState, (uint) _operationState);
        } else if (context.unreliableChannel) {
            if (_controlledStructurePositionShouldWrite) {
                _controlledStructurePositionShouldWrite = false;
                stream.WriteBytes((uint)PropertyID.ControlledStructurePosition, WriteStream.Vector3ToBytes(_controlledStructurePosition));
                didWriteProperties = true;
            }
            if (_controlForceShouldWrite) {
                _controlForceShouldWrite = false;
                stream.WriteBytes((uint)PropertyID.ControlForce, WriteStream.Vector3ToBytes(_controlForce));
                didWriteProperties = true;
            }
            
            if (didWriteProperties) InvalidateUnreliableLength();
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.deviceModeSet || entry.operationStateSet) {
                _cache.PushLocalCacheToInflight(context.updateID);
                ClearCacheOnStreamCallback(context);
            }
            if (entry.deviceModeSet) {
                stream.WriteVarint32((uint)PropertyID.DeviceMode, (uint) entry.deviceMode);
                didWriteProperties = true;
            }
            if (entry.operationStateSet) {
                stream.WriteVarint32((uint)PropertyID.OperationState, (uint) entry.operationState);
                didWriteProperties = true;
            }
            
            if (didWriteProperties) InvalidateReliableLength();
        }
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.DeviceMode: {
                    Types.EOmniDeviceMode previousValue = _deviceMode;
                    _deviceMode = (Types.EOmniDeviceMode) stream.ReadVarint32();
                    bool deviceModeExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.deviceModeSet);
                    if (!deviceModeExistsInChangeCache && _deviceMode != previousValue) {
                        FireDeviceModeDidChange(_deviceMode);
                    }
                    break;
                }
                case (uint)PropertyID.OperationState: {
                    Types.EHandDeviceState previousValue = _operationState;
                    _operationState = (Types.EHandDeviceState) stream.ReadVarint32();
                    bool operationStateExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.operationStateSet);
                    if (!operationStateExistsInChangeCache && _operationState != previousValue) {
                        FireOperationStateDidChange(_operationState);
                    }
                    break;
                }
                case (uint)PropertyID.ControlledStructurePosition: {
                    UnityEngine.Vector3 previousValue = _controlledStructurePosition;
                    _controlledStructurePosition = ReadStream.Vector3FromBytes(stream.ReadBytes());
                    _controlledStructurePositionShouldWrite = false;
                    if (_controlledStructurePosition != previousValue) {
                        FireControlledStructurePositionDidChange(_controlledStructurePosition);
                    }
                    break;
                }
                case (uint)PropertyID.ControlForce: {
                    UnityEngine.Vector3 previousValue = _controlForce;
                    _controlForce = ReadStream.Vector3FromBytes(stream.ReadBytes());
                    _controlForceShouldWrite = false;
                    if (_controlForce != previousValue) {
                        FireControlForceDidChange(_controlForce);
                    }
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
        }
    }
    
    #region Cache Operations
    
    private StreamEventDispatcher _streamEventDispatcher;
    
    private void FlattenCache() {
        _deviceMode = deviceMode;
        _operationState = operationState;
        _cache.Clear();
    }
    
    private void ClearCache(uint updateID) {
        _cache.RemoveUpdateFromInflight(updateID);
    }
    
    private void ClearCacheOnStreamCallback(StreamContext context) {
        if (_streamEventDispatcher != context.dispatcher) {
            UnsubscribeClearCacheCallback(); // unsub from previous dispatcher
        }
        _streamEventDispatcher = context.dispatcher;
        _streamEventDispatcher.AddStreamCallback(context.updateID, ClearCache);
    }
    
    private void UnsubscribeClearCacheCallback() {
        if (_streamEventDispatcher != null) {
            _streamEventDispatcher.RemoveStreamCallback(ClearCache);
            _streamEventDispatcher = null;
        }
    }
    
    #endregion
}
/* ----- End Normal Autogenerated Code ----- */
