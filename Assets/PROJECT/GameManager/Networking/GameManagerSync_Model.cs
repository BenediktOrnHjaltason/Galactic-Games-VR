using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class GameManagerSync_Model
{
    [RealtimeProperty(1, true, true)]
    int _clientsDoneSpawning;

    [RealtimeProperty(2, true, true)]
    int _clientCrossedFinishLine;

    [RealtimeProperty(3, true, true)]
    int _clientLeftRoom;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class GameManagerSync_Model : RealtimeModel {
    public int clientsDoneSpawning {
        get {
            return _cache.LookForValueInCache(_clientsDoneSpawning, entry => entry.clientsDoneSpawningSet, entry => entry.clientsDoneSpawning);
        }
        set {
            if (this.clientsDoneSpawning == value) return;
            _cache.UpdateLocalCache(entry => { entry.clientsDoneSpawningSet = true; entry.clientsDoneSpawning = value; return entry; });
            InvalidateReliableLength();
            FireClientsDoneSpawningDidChange(value);
        }
    }
    
    public int clientCrossedFinishLine {
        get {
            return _cache.LookForValueInCache(_clientCrossedFinishLine, entry => entry.clientCrossedFinishLineSet, entry => entry.clientCrossedFinishLine);
        }
        set {
            if (this.clientCrossedFinishLine == value) return;
            _cache.UpdateLocalCache(entry => { entry.clientCrossedFinishLineSet = true; entry.clientCrossedFinishLine = value; return entry; });
            InvalidateReliableLength();
            FireClientCrossedFinishLineDidChange(value);
        }
    }
    
    public int clientLeftRoom {
        get {
            return _cache.LookForValueInCache(_clientLeftRoom, entry => entry.clientLeftRoomSet, entry => entry.clientLeftRoom);
        }
        set {
            if (this.clientLeftRoom == value) return;
            _cache.UpdateLocalCache(entry => { entry.clientLeftRoomSet = true; entry.clientLeftRoom = value; return entry; });
            InvalidateReliableLength();
            FireClientLeftRoomDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(GameManagerSync_Model model, T value);
    public event PropertyChangedHandler<int> clientsDoneSpawningDidChange;
    public event PropertyChangedHandler<int> clientCrossedFinishLineDidChange;
    public event PropertyChangedHandler<int> clientLeftRoomDidChange;
    
    private struct LocalCacheEntry {
        public bool clientsDoneSpawningSet;
        public int clientsDoneSpawning;
        public bool clientCrossedFinishLineSet;
        public int clientCrossedFinishLine;
        public bool clientLeftRoomSet;
        public int clientLeftRoom;
    }
    
    private LocalChangeCache<LocalCacheEntry> _cache = new LocalChangeCache<LocalCacheEntry>();
    
    public enum PropertyID : uint {
        ClientsDoneSpawning = 1,
        ClientCrossedFinishLine = 2,
        ClientLeftRoom = 3,
    }
    
    public GameManagerSync_Model() : this(null) {
    }
    
    public GameManagerSync_Model(RealtimeModel parent) : base(null, parent) {
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        UnsubscribeClearCacheCallback();
    }
    
    private void FireClientsDoneSpawningDidChange(int value) {
        try {
            clientsDoneSpawningDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireClientCrossedFinishLineDidChange(int value) {
        try {
            clientCrossedFinishLineDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireClientLeftRoomDidChange(int value) {
        try {
            clientLeftRoomDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        int length = 0;
        if (context.fullModel) {
            FlattenCache();
            length += WriteStream.WriteVarint32Length((uint)PropertyID.ClientsDoneSpawning, (uint)_clientsDoneSpawning);
            length += WriteStream.WriteVarint32Length((uint)PropertyID.ClientCrossedFinishLine, (uint)_clientCrossedFinishLine);
            length += WriteStream.WriteVarint32Length((uint)PropertyID.ClientLeftRoom, (uint)_clientLeftRoom);
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.clientsDoneSpawningSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.ClientsDoneSpawning, (uint)entry.clientsDoneSpawning);
            }
            if (entry.clientCrossedFinishLineSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.ClientCrossedFinishLine, (uint)entry.clientCrossedFinishLine);
            }
            if (entry.clientLeftRoomSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.ClientLeftRoom, (uint)entry.clientLeftRoom);
            }
        }
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var didWriteProperties = false;
        
        if (context.fullModel) {
            stream.WriteVarint32((uint)PropertyID.ClientsDoneSpawning, (uint)_clientsDoneSpawning);
            stream.WriteVarint32((uint)PropertyID.ClientCrossedFinishLine, (uint)_clientCrossedFinishLine);
            stream.WriteVarint32((uint)PropertyID.ClientLeftRoom, (uint)_clientLeftRoom);
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.clientsDoneSpawningSet || entry.clientCrossedFinishLineSet || entry.clientLeftRoomSet) {
                _cache.PushLocalCacheToInflight(context.updateID);
                ClearCacheOnStreamCallback(context);
            }
            if (entry.clientsDoneSpawningSet) {
                stream.WriteVarint32((uint)PropertyID.ClientsDoneSpawning, (uint)entry.clientsDoneSpawning);
                didWriteProperties = true;
            }
            if (entry.clientCrossedFinishLineSet) {
                stream.WriteVarint32((uint)PropertyID.ClientCrossedFinishLine, (uint)entry.clientCrossedFinishLine);
                didWriteProperties = true;
            }
            if (entry.clientLeftRoomSet) {
                stream.WriteVarint32((uint)PropertyID.ClientLeftRoom, (uint)entry.clientLeftRoom);
                didWriteProperties = true;
            }
            
            if (didWriteProperties) InvalidateReliableLength();
        }
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.ClientsDoneSpawning: {
                    int previousValue = _clientsDoneSpawning;
                    _clientsDoneSpawning = (int)stream.ReadVarint32();
                    bool clientsDoneSpawningExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.clientsDoneSpawningSet);
                    if (!clientsDoneSpawningExistsInChangeCache && _clientsDoneSpawning != previousValue) {
                        FireClientsDoneSpawningDidChange(_clientsDoneSpawning);
                    }
                    break;
                }
                case (uint)PropertyID.ClientCrossedFinishLine: {
                    int previousValue = _clientCrossedFinishLine;
                    _clientCrossedFinishLine = (int)stream.ReadVarint32();
                    bool clientCrossedFinishLineExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.clientCrossedFinishLineSet);
                    if (!clientCrossedFinishLineExistsInChangeCache && _clientCrossedFinishLine != previousValue) {
                        FireClientCrossedFinishLineDidChange(_clientCrossedFinishLine);
                    }
                    break;
                }
                case (uint)PropertyID.ClientLeftRoom: {
                    int previousValue = _clientLeftRoom;
                    _clientLeftRoom = (int)stream.ReadVarint32();
                    bool clientLeftRoomExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.clientLeftRoomSet);
                    if (!clientLeftRoomExistsInChangeCache && _clientLeftRoom != previousValue) {
                        FireClientLeftRoomDidChange(_clientLeftRoom);
                    }
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
        }
    }
    
    #region Cache Operations
    
    private StreamEventDispatcher _streamEventDispatcher;
    
    private void FlattenCache() {
        _clientsDoneSpawning = clientsDoneSpawning;
        _clientCrossedFinishLine = clientCrossedFinishLine;
        _clientLeftRoom = clientLeftRoom;
        _cache.Clear();
    }
    
    private void ClearCache(uint updateID) {
        _cache.RemoveUpdateFromInflight(updateID);
    }
    
    private void ClearCacheOnStreamCallback(StreamContext context) {
        if (_streamEventDispatcher != context.dispatcher) {
            UnsubscribeClearCacheCallback(); // unsub from previous dispatcher
        }
        _streamEventDispatcher = context.dispatcher;
        _streamEventDispatcher.AddStreamCallback(context.updateID, ClearCache);
    }
    
    private void UnsubscribeClearCacheCallback() {
        if (_streamEventDispatcher != null) {
            _streamEventDispatcher.RemoveStreamCallback(ClearCache);
            _streamEventDispatcher = null;
        }
    }
    
    #endregion
}
/* ----- End Normal Autogenerated Code ----- */
