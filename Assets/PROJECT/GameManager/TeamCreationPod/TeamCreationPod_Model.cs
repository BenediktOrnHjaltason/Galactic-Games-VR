using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class TeamCreationPod_Model
{
    [RealtimeProperty(1, true, true)]
    int _clientDoneDisablingNonTeamGameplayObjects;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class TeamCreationPod_Model : RealtimeModel {
    public int clientDoneDisablingNonTeamGameplayObjects {
        get {
            return _cache.LookForValueInCache(_clientDoneDisablingNonTeamGameplayObjects, entry => entry.clientDoneDisablingNonTeamGameplayObjectsSet, entry => entry.clientDoneDisablingNonTeamGameplayObjects);
        }
        set {
            if (this.clientDoneDisablingNonTeamGameplayObjects == value) return;
            _cache.UpdateLocalCache(entry => { entry.clientDoneDisablingNonTeamGameplayObjectsSet = true; entry.clientDoneDisablingNonTeamGameplayObjects = value; return entry; });
            InvalidateReliableLength();
            FireClientDoneDisablingNonTeamGameplayObjectsDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(TeamCreationPod_Model model, T value);
    public event PropertyChangedHandler<int> clientDoneDisablingNonTeamGameplayObjectsDidChange;
    
    private struct LocalCacheEntry {
        public bool clientDoneDisablingNonTeamGameplayObjectsSet;
        public int clientDoneDisablingNonTeamGameplayObjects;
    }
    
    private LocalChangeCache<LocalCacheEntry> _cache = new LocalChangeCache<LocalCacheEntry>();
    
    public enum PropertyID : uint {
        ClientDoneDisablingNonTeamGameplayObjects = 1,
    }
    
    public TeamCreationPod_Model() : this(null) {
    }
    
    public TeamCreationPod_Model(RealtimeModel parent) : base(null, parent) {
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        UnsubscribeClearCacheCallback();
    }
    
    private void FireClientDoneDisablingNonTeamGameplayObjectsDidChange(int value) {
        try {
            clientDoneDisablingNonTeamGameplayObjectsDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        int length = 0;
        if (context.fullModel) {
            FlattenCache();
            length += WriteStream.WriteVarint32Length((uint)PropertyID.ClientDoneDisablingNonTeamGameplayObjects, (uint)_clientDoneDisablingNonTeamGameplayObjects);
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.clientDoneDisablingNonTeamGameplayObjectsSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.ClientDoneDisablingNonTeamGameplayObjects, (uint)entry.clientDoneDisablingNonTeamGameplayObjects);
            }
        }
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var didWriteProperties = false;
        
        if (context.fullModel) {
            stream.WriteVarint32((uint)PropertyID.ClientDoneDisablingNonTeamGameplayObjects, (uint)_clientDoneDisablingNonTeamGameplayObjects);
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.clientDoneDisablingNonTeamGameplayObjectsSet) {
                _cache.PushLocalCacheToInflight(context.updateID);
                ClearCacheOnStreamCallback(context);
            }
            if (entry.clientDoneDisablingNonTeamGameplayObjectsSet) {
                stream.WriteVarint32((uint)PropertyID.ClientDoneDisablingNonTeamGameplayObjects, (uint)entry.clientDoneDisablingNonTeamGameplayObjects);
                didWriteProperties = true;
            }
            
            if (didWriteProperties) InvalidateReliableLength();
        }
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.ClientDoneDisablingNonTeamGameplayObjects: {
                    int previousValue = _clientDoneDisablingNonTeamGameplayObjects;
                    _clientDoneDisablingNonTeamGameplayObjects = (int)stream.ReadVarint32();
                    bool clientDoneDisablingNonTeamGameplayObjectsExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.clientDoneDisablingNonTeamGameplayObjectsSet);
                    if (!clientDoneDisablingNonTeamGameplayObjectsExistsInChangeCache && _clientDoneDisablingNonTeamGameplayObjects != previousValue) {
                        FireClientDoneDisablingNonTeamGameplayObjectsDidChange(_clientDoneDisablingNonTeamGameplayObjects);
                    }
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
        }
    }
    
    #region Cache Operations
    
    private StreamEventDispatcher _streamEventDispatcher;
    
    private void FlattenCache() {
        _clientDoneDisablingNonTeamGameplayObjects = clientDoneDisablingNonTeamGameplayObjects;
        _cache.Clear();
    }
    
    private void ClearCache(uint updateID) {
        _cache.RemoveUpdateFromInflight(updateID);
    }
    
    private void ClearCacheOnStreamCallback(StreamContext context) {
        if (_streamEventDispatcher != context.dispatcher) {
            UnsubscribeClearCacheCallback(); // unsub from previous dispatcher
        }
        _streamEventDispatcher = context.dispatcher;
        _streamEventDispatcher.AddStreamCallback(context.updateID, ClearCache);
    }
    
    private void UnsubscribeClearCacheCallback() {
        if (_streamEventDispatcher != null) {
            _streamEventDispatcher.RemoveStreamCallback(ClearCache);
            _streamEventDispatcher = null;
        }
    }
    
    #endregion
}
/* ----- End Normal Autogenerated Code ----- */
